name: management
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  #schedule:
  #  - cron: '45 */1 * * *'
  workflow_run:
    workflows: ["sb config verification"]  # 指定依赖的工作流名称
    types:
      - completed  # 只在工作流完成时触发
jobs:
  management:
    runs-on: ubuntu-latest
    outputs:
      recent_files: ${{ steps.find-files.outputs.recent_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史

      - name: Find files modified within last hour
        id: find-files
        run: |
          current_time=$(date +%s)
          one_hour_ago=$((current_time - 259000))
          target_dir="sub"
      
          temp_file=$(mktemp)
          find "$target_dir" -type f \( \
            -name "f*.json" -o \
            -name "k*.json" -o \
            -name "sk*.json" \
          \) -print0 | while IFS= read -r -d '' file; do
            commit_time=$(git log -1 --format="%ct" -- "$file")
            
            if [ -n "$commit_time" ] && [ "$commit_time" -ge "$one_hour_ago" ]; then
              echo "$file" >> "$temp_file"
              echo "🟢 最近修改: $file ($(date -d @$commit_time '+%Y-%m-%d %H:%M:%S UTC'))"
            fi
          done
          # 关键修改点：直接检查文件内容
          if [ -s "$temp_file" ]; then
            echo "找到以下最近修改的文件:"
            cat "$temp_file"
            echo "recent_files=$(cat $temp_file | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
          else
            echo "❌ 没有找到最近一小时修改的文件"
          fi
          rm "$temp_file"

      - name: Update sub.txt
        if: ${{ steps.find-files.outputs.recent_files }}
        run: |
          # 去除多余引号并转换格式
          echo '${{ steps.find-files.outputs.recent_files }}' | jq -r 'join("\n")' > sub/sub.txt

      - name: list newly updated files
        run: |
          cd ./sub
          pwd
          echo "Generated at: $(date)" >> sub.txt  # 添加时间戳作为内容
          #find . -type f \( -iname "f*.json" -o -iname "k*.json" -o \( -iname "s*.json" -a ! -iname "spl*.json" \) \) -mmin -60 >> sub.txt
          #cat sub.txt
        continue-on-error: true      
      - name: Cleanup old files
        if: ${{ steps.find-files.outputs.recent_files }}  # 仅在发现新文件时执行
        run: |
          #cd sub  # 根据你的目录结构调整          
          # 步骤1：创建保留文件列表
          echo "保留文件列表："
          echo '${{ steps.find-files.outputs.recent_files }}' | jq -r '.[]'
          echo '${{ steps.find-files.outputs.recent_files }}' | jq -r '.[]' > keep_files.txt
          #find . -type f \( -name "f*.json" \) >> keep_files.txt
          echo "providers.json" >> keep_files.txt
          
          # 步骤2：查找所有目标文件
          find . -type f \( -name "f*.json" -o -name "k*.json"  -o -name "sk*.json*" -o -name "spl*" \) > all_files.txt
      
          # 步骤3：生成删除列表（排除保留文件）
          grep -v -F -f keep_files.txt all_files.txt > delete_files.txt

          target_dir="sub"
          # 查找符合条件的文件，并筛选出行数小于220的文件
          find "$target_dir" -type f \( \
              -name "f*.json" -o \
              -name "k*.json" -o \
              -name "sk*.json" \
          \) | while read -r file; do
              # 统计文件行数
              line_count=$(wc -l < "$file")
              # 判断行数是否小于220
              if (( line_count < 220 )); then
                  echo "$file" >> delete_files.txt
                  sed -i "/$(echo "$file" | sed 's/[\/&]/\\&/g')/d" sub/sub.txt
              fi
          done
      
          # 安全验证（调试输出）
          echo "将要删除的文件："
          cat delete_files.txt || echo "没有需要删除的文件"
      
          # 步骤4：执行删除（带确认保护）
          if [ -s delete_files.txt ]; then
            echo "正在删除旧文件..."
            xargs -a delete_files.txt rm -v
          else
            echo "没有需要删除的文件"
          fi
      
          # 清理临时文件（可选）
          rm -f keep_files.txt all_files.txt delete_files.txt
        continue-on-error: true      

      - name: Git Setup
        run: |
          git config --global user.email "wanghz518@gmail.com"
          git config --global user.name "shenmyisi"

      - name: Check for changes
        id: verify_diff
        run: |
          git status --porcelain
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_exist=true" >> $GITHUB_OUTPUT
          else
            echo "changes_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push
        if: steps.verify_diff.outputs.changes_exist == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update files"
          file_pattern: '*'    # 或直接省略 file_pattern 参数
