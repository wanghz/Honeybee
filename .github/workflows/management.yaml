name: management
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  #schedule:
  #  - cron: '45 */1 * * *'
  workflow_run:
    workflows: ["sb config verification"]  # 指定依赖的工作流名称
    types:
      - completed  # 只在工作流完成时触发
jobs:
  management:
    runs-on: ubuntu-latest
    name: Delete old 
    steps:
      - uses: actions/checkout@master
      - uses: daniL16/action-clean-old-files@master
        with:
          GITHUB_TOKEN: ${{ secrets.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 }}
          dir: './sub'
          base_branch: 'master'
          days_old: '2'
          
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: remove outdated files
        run: |
          cd /home/runner/work/Honeybee/Honeybee/sub
          touch *.py
          touch config*.*
          # 设置时间计算基准（UTC 时间）
          cutoff=$(date -u -d "2 days ago" +%s)
          
          # 查找所有目标文件（兼容大小写）
          find . -type f \( \
              -iname "f*.json" \
              -o -iname "k*.json" \
              -o -iname "s*.*" \
          \) -print0 | while IFS= read -r -d $'\0' file; do
                        
              # 获取相对路径（去掉 ./ 前缀）
              rel_file="${file#./}"
              
              # 处理已跟踪文件（基于 Git 提交时间）
              if git ls-files --error-unmatch -- "$rel_file" >/dev/null 2>&1; then
                  # 获取最后一次提交时间戳（UTC）
                  timestamp=$(git log -1 --format=%ct -- "$rel_file")
                  if [ -n "$timestamp" ] && [ $timestamp -lt $cutoff ]; then
                      echo "🗑️ 删除已跟踪文件: $rel_file"
                      rm -v "$rel_file"
                  fi
                  
              # 处理未跟踪文件（基于文件系统时间） 
              else
                  # 获取文件修改时间（转换为 UTC）
                  file_mtime=$(date -u -r "$rel_file" +%s)
                  if [ $file_mtime -lt $cutoff ]; then
                      echo "🗑️ 删除未跟踪文件: $rel_file"
                      rm -v "$rel_file"
                  fi
              fi
          done
        continue-on-error: true
        
      - name: list newly updated files
        run: |
          cd /home/runner/work/Honeybee/Honeybee/sub
          pwd
          echo "Generated at: $(date)" > sub.txt  # 添加时间戳作为内容
          find . -type f \( -iname "f*.json" -o -iname "k*.json" -o \( -iname "s*.json" -a ! -iname "spl*.json" \) \) -mmin -60 >> sub.txt
          #cat sub.txt
        continue-on-error: true

      - name: Git Setup
        run: |
          git config --global user.email "wanghz518@gmail.com"
          git config --global user.name "shenmyisi"

      - name: Check for changes
        id: verify_diff
        run: |
          git status --porcelain
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_exist=true" >> $GITHUB_OUTPUT
          else
            echo "changes_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push
        if: steps.verify_diff.outputs.changes_exist == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update sub.txt with new content"
          file_pattern: 'sub/sub.txt'
