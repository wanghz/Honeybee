name: management
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  #schedule:
  #  - cron: '45 */1 * * *'
  workflow_run:
    workflows: ["sb config verification"]  # 指定依赖的工作流名称
    types:
      - completed  # 只在工作流完成时触发
jobs:
  management:
    runs-on: ubuntu-latest
    outputs:
      recent_files: ${{ steps.find-files.outputs.recent_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史

      - name: Find files modified within last hour
        id: find-files
        run: |
          current_time=$(date +%s)
          one_hour_ago=$((current_time - 3600))
          target_dir="./sub"  # 替换为你的目标目录

          # 创建临时文件
          temp_file=$(mktemp)

          # 使用带空字符分隔的安全方式遍历文件
          find "$target_dir" -type f -print0 | while IFS= read -r -d '' file; do
            commit_time=$(git log -1 --format="%ct" -- "$file")
            
            if [ -n "$commit_time" ] && [ "$commit_time" -ge "$one_hour_ago" ]; then
              echo "$file" >> "$temp_file"
              echo "🟢 最近修改: $file ($(date -d @$commit_time))"
            fi
          done

          # 处理结果输出
          if [ -s "$temp_file" ]; then
            echo "找到以下最近修改的文件:"
            cat "$temp_file"
            echo "recent_files=$(cat $temp_file | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
          else
            echo "❌ 没有找到最近一小时修改的文件"
          done

          rm "$temp_file"

      - name: Use results
        if: ${{ steps.find-files.outputs.recent_files }}
        run: |
          echo "找到最近修改的文件:"
          echo "${{ steps.find-files.outputs.recent_files }}"
      - name: list newly updated files
        run: |
          cd ./sub
          pwd
          echo "Generated at: $(date)" >> sub.txt  # 添加时间戳作为内容
          #find . -type f \( -iname "f*.json" -o -iname "k*.json" -o \( -iname "s*.json" -a ! -iname "spl*.json" \) \) -mmin -60 >> sub.txtt
          #cat sub.txt
        continue-on-error: true      
      - name: 处理匹配的文件
        run: |
          # 读取Action输出的文件列表
          echo "匹配的文件：${{ steps.changed-files.outputs.all_changed_files }}"
          # 进一步操作（例如删除旧文件）
          while IFS= read -r file; do
            echo "处理文件: $file"
            #rm "$file"  # 根据需求执行删除
          done <<< "${{ steps.changed-files.outputs.all_changed_files }}"        

      - name: Git Setup
        run: |
          git config --global user.email "wanghz518@gmail.com"
          git config --global user.name "shenmyisi"

      - name: Check for changes
        id: verify_diff
        run: |
          git status --porcelain
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_exist=true" >> $GITHUB_OUTPUT
          else
            echo "changes_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push
        if: steps.verify_diff.outputs.changes_exist == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update sub.txt with new content"
          file_pattern: 'sub/sub.txt'
